[General]
network = LoRaNetworkMultipleVendors
num-rngs = 16
rng-class = "cMersenneTwister"
ned-path=../src;../simulations;../../inet/examples;../../inet/src;../../inet/tutorials

# network features
**.numberOfGateways = ${gateways=4,6,8,10,12,14,16,18,20}
**.numberOfNS = ${numberOfNS=1,2}
**.networkServerNumber = intuniform(0,${v=(($numberOfNS)-1)})
**.loRaGWs[*].packetForwarder.localPort = 2000
**.loRaGWs[*].packetForwarder.destPort = 1000
#**.loRaGW[*].packetForwarder.gwNSNumber = intuniform(0,1)
#"networkServer[0]"
**.loRaGWs[*].packetForwarder.destAddresses = ""

**.networkServer[*].numUdpApps = 1
**.networkServer[*].**.evaluateADRinServer = true
**.networkServer[*].udpApp[0].typename = "NetworkServerApp"
**.networkServer[*].udpApp[0].destAddresses = ""
**.networkServer[*].udpApp[0].destPort = 2000
**.networkServer[*].udpApp[0].localPort = 1000
**.networkServer[*].udpApp[0].adrMethod = ${"avg"}

#gateway features
**.LoRaGWNic.radio.iAmGateway = true
**.loRaGWs[*].**.initFromDisplayString = false
**.loRaGWs[*].**.initialX = uniform(0m, 1000m)
**.loRaGWs[*].**.initialY = uniform(0m, 1000m)

#general features
**.sigma = 0
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 1000m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 0m

# 800*800 max 1200*1200, GW 400 400

LoRaNetworkTest.**.radio.separateTransmissionParts = false
LoRaNetworkTest.**.radio.separateReceptionParts = false

**.delayer.config = xmldoc("cloudDelays.xml")
**.radio.radioMediumModule = "LoRaMedium"
**.LoRaMedium.pathLossType = "LoRaPathLossOulu"
**.minInterferenceTime = 0s
**.displayAddresses = false
**.alohaChannelModel = false

# cache features
**.LoRaMedium.mediumLimitCacheType = "LoRaMediumCache"
**.LoRaMedium.rangeFilter = "communicationRange"
**.LoRaMedium.neighborCacheType = "LoRaNeighborCache"
**.LoRaMedium.neighborCache.range = 2000m
**.LoRaMedium.neighborCache.refillPeriod = 3600s
**.LoRaMedium.radioModeFilter = true

**.powerConsumption:vector.vector-recording = false
**.radioMode:vector.vector-recording = false
**.powerConsumption:vector.vector-recording = false
**.receptionState:vector.vector-recording = false
**.residualEnergyCapacity:vector.vector-recording = false
**.transmissionState:vector.vector-recording = false
**.txState:vector.vector-recording = false
**.encapPk:vector(packetBytes).vector-recording = false
**.rxPkFromHL:vector(packetBytes).vector-recording = false
**.txPk:vector(packetBytes).vector-recording = false
**.rxPkOk:vector(packetBytes).vector-recording = false
**.passedUpPk:vector(packetBytes).vector-recording = false
**.decapPk:vector(packetBytes).vector-recording = false
**.rcvdPk:vector(packetBytes).vector-recording = false
**.rcvdPkFromHL:vector(packetBytes).vector-recording = false
**.queueLength:vector.vector-recording = false
**.queueingTime:vector.vector-recording = false
**.sentReq:vector.vector-recording = false
**.sentReply:vector.vector-recording = false

[Config LoRaWAN]
sim-time-limit = 6h
**.enableDQ = false
**.timeToFirstPacket = exponential(180s)
**.timeToNextPacket = exponential(${load=100}s)
**.timeToStartSignal = 0
**.numberOfSubSystems = 0
**.numberOfNodes = ${nodes=10}
**.numberOfAeseNodes = 0
**.numberOfAeseActuatorNodes = 0
**.numberOfPacketsToSend = 0
**.sendImmediateActuation = false
**.retryLimit = 8 # LAKSH:CHange to 8 for confirmed/retransmit messages
**.AeseGWEnabled = false

#nodes features
**.loRaNodes[*].**.initFromDisplayString = false
**.loRaNodes[*].**.evaluateADRinNode = true
**.loRaNodes[*].**initialLoRaSF = intuniform(7,12)#${SF=7..12 step 1}#intuniform(7,12)
**.loRaNodes[*].**initialLoRaBW = 125 kHz
**.loRaNodes[*].**initialLoRaCR = 1
**.loRaNodes[*].**initialLoRaTP = (2dBm + 3dBm*intuniform(0, 4))
**.loRaNodes[*].**initialLoRaDC = 1 #DutyCycle, value as a percentage. Eg. 1 means we're transmitting no more than 1% of the time
**.loRaNodes[*].**initialLoRaCF = (intuniform(0,2) * 0.2MHz + 868.1MHz)

**.loRaNodes[*].mobilityType = "LinearMobility"
**.loRaNodes[*].mobility.speed = 0mps
**.loRaNodes[*].mobility.angle = 270deg

#power consumption features
**.loRaNodes[*].LoRaNic.radio.energyConsumerType = "LoRaEnergyConsumer"
**.loRaNodes[*].**.energySourceModule = "IdealEpEnergyStorage"
**.loRaNodes[*].LoRaNic.radio.energyConsumer.configFile = xmldoc("energyConsumptionParameters.xml")

# random deployment of nodes in a square square area
**.loRaNodes[*].**.initialX = uniform(0m, 1000m)
**.loRaNodes[*].**.initialY = uniform(0m, 1000m)

[Config AESENeighbours]
sim-time-limit = 1h
**.enableDQ = false
**.timeToFirstPacket = exponential(180s)
**.timeToNextPacket = exponential(${load=10,30}s)
**.timeToStartSignal = 0
**.numberOfSubSystems = 0
**.numberOfNodes = ${nodes=100,200,300,400,500}
**.numberOfAeseNodes = 0
**.numberOfAeseActuatorNodes = 0
**.numberOfPacketsToSend = 0
**.sendImmediateActuation = false
**.retryLimit = 8 # LAKSH:CHange to 8 for confirmed/retransmit messages
**.AeseGWEnabled = true

#nodes features
**.loRaNodes[*].**.initFromDisplayString = false
**.loRaNodes[*].**.evaluateADRinNode = true
**.loRaNodes[*].**initialLoRaSF = intuniform(7,12)#${SF=7..12 step 1}#intuniform(7,12)
**.loRaNodes[*].**initialLoRaBW = 125 kHz
**.loRaNodes[*].**initialLoRaCR = 1
**.loRaNodes[*].**initialLoRaTP = (2dBm + 3dBm*intuniform(0, 4))
**.loRaNodes[*].**initialLoRaDC = 1 #DutyCycle, value as a percentage. Eg. 1 means we're transmitting no more than 1% of the time
**.loRaNodes[*].**initialLoRaCF = (intuniform(0,2) * 0.2MHz + 868.1MHz)

**.loRaNodes[*].mobilityType = "LinearMobility"
**.loRaNodes[*].mobility.speed = 0mps
**.loRaNodes[*].mobility.angle = 270deg

#power consumption features
**.loRaNodes[*].LoRaNic.radio.energyConsumerType = "LoRaEnergyConsumer"
**.loRaNodes[*].**.energySourceModule = "IdealEpEnergyStorage"
**.loRaNodes[*].LoRaNic.radio.energyConsumer.configFile = xmldoc("energyConsumptionParameters.xml")

# random deployment of nodes in a square square area
**.loRaNodes[*].**.initialX = uniform(0m, 1000m)
**.loRaNodes[*].**.initialY = uniform(0m, 1000m)
